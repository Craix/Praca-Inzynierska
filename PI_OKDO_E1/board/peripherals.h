/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_common.h"
#include "fsl_i2c.h"
#include "fsl_spi.h"
#include "fsl_ctimer.h"
#include "fsl_clock.h"
#include "fsl_lpadc.h"
#include "fsl_pint.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitPeripherals_cm33_core0 functional group */
/* BOARD_InitPeripherals_cm33_core0 defines for FLEXCOMM4 */
/* Definition of peripheral ID */
#define MPU6050_I2C_PERIPHERAL ((I2C_Type *)FLEXCOMM4)
/* Definition of the clock source frequency */
#define MPU6050_I2C_CLOCK_SOURCE 12000000UL
/* BOARD_InitPeripherals_cm33_core0 defines for FLEXCOMM8 */
/* Definition of peripheral ID */
#define LCD_SPI_PERIPHERAL ((SPI_Type *)FLEXCOMM8)
/* Definition of the clock source frequency */
#define LCD_SPI_CLOCK_SOURCE 32000000UL
/* Definition of peripheral ID */
#define PWM_TIMER_PERIPHERAL CTIMER2
/* Timer tick frequency in Hz (input frequency of the timer) */
#define PWM_TIMER_TICK_FREQ 100000UL
/* Timer tick period in ns (input period of the timer) */
#define PWM_TIMER_TICK_PERIOD 10000UL
/* Definition of PWM period channel. */
#define PWM_TIMER_PWM_PERIOD_CH kCTIMER_Match_3
/* Definition of PWM period */
#define PWM_TIMER_PWM_PERIOD 99
/* Definition of channel 1 ID */
#define PWM_TIMER_PWM_1_CHANNEL kCTIMER_Match_1
/* Definition of channel 1 duty */
#define PWM_TIMER_PWM_1_DUTY 100
/* Definition of channel 2 ID */
#define PWM_TIMER_PWM_2_CHANNEL kCTIMER_Match_2
/* Definition of channel 2 duty */
#define PWM_TIMER_PWM_2_DUTY 100
/* PWM_TIMER interrupt vector ID (number). */
#define PWM_TIMER_TIMER_IRQN CTIMER2_IRQn
/* PWM_TIMER interrupt vector priority. */
#define PWM_TIMER_TIMER_IRQ_PRIORITY 2
/* Alias for ADC0 peripheral */
#define ADC_BATTERY_PERIPHERAL ADC0
/* ADC_BATTERY interrupt vector ID (number). */
#define ADC_BATTERY_IRQN ADC0_IRQn
/* ADC_BATTERY interrupt vector priority. */
#define ADC_BATTERY_IRQ_PRIORITY 3
/* ADC_BATTERY interrupt handler identifier. */
#define CB_ADC ADC0_IRQHandler
/* Trigger 5 - adc_battery */
#define ADC_BATTERY_ADC_BATTERY 5U
/* Definition of peripheral ID */
#define ADC_TIMER_PERIPHERAL CTIMER0
/* Timer tick frequency in Hz (input frequency of the timer) */
#define ADC_TIMER_TICK_FREQ 96000000UL
/* Timer tick period in ns (input period of the timer) */
#define ADC_TIMER_TICK_PERIOD 10UL
/* Definition of PWM period channel. */
#define ADC_TIMER_PWM_PERIOD_CH kCTIMER_Match_0
/* Definition of channel 3 ID */
#define ADC_TIMER_MATCH_3_CHANNEL kCTIMER_Match_3
/* BOARD_InitPeripherals_cm33_core0 defines for PINT */
/* Definition of peripheral ID */
#define PINT_PERIPHERAL ((PINT_Type *) PINT_BASE)
/* PINT interrupt vector ID (number). */
#define PINT_PINT_0_IRQN PIN_INT0_IRQn
/* PINT interrupt vector priority. */
#define PINT_PINT_0_IRQ_PRIORITY 0
/* PINT interrupt vector ID (number). */
#define PINT_PINT_1_IRQN PIN_INT1_IRQn
/* PINT interrupt vector priority. */
#define PINT_PINT_1_IRQ_PRIORITY 1
/* PINT interrupt vector ID (number). */
#define PINT_PINT_2_IRQN PIN_INT2_IRQn
/* PINT interrupt vector priority. */
#define PINT_PINT_2_IRQ_PRIORITY 1
/* PINT interrupt vector ID (number). */
#define PINT_PINT_3_IRQN PIN_INT3_IRQn
/* PINT interrupt vector priority. */
#define PINT_PINT_3_IRQ_PRIORITY 4
/* Definition of PINT interrupt ID for interrupt 0  */
#define PINT_MPU6050 kPINT_PinInt0
/* Definition of PINT interrupt ID for interrupt 1  */
#define PINT_ENCA_CLK kPINT_PinInt1
/* Definition of PINT interrupt ID for interrupt 2  */
#define PINT_ENCB_CLK kPINT_PinInt2
/* Definition of PINT interrupt ID for interrupt 3  */
#define PINT_BUTTON kPINT_PinInt3

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const i2c_master_config_t MPU6050_I2C_config;
extern const spi_master_config_t LCD_SPI_config;
extern const ctimer_config_t PWM_TIMER_config;
extern const lpadc_config_t ADC_BATTERY_config;
extern lpadc_conv_command_config_t ADC_BATTERY_commandsConfig[1];
extern lpadc_conv_trigger_config_t ADC_BATTERY_triggersConfig[1];
extern const ctimer_config_t ADC_TIMER_config;
extern const ctimer_match_config_t ADC_TIMER_Match_3_config;

/***********************************************************************************************************************
 * Callback functions
 **********************************************************************************************************************/
  /* Single callback function declaration */
extern void CB_PWM(uint32_t flags);
extern ctimer_callback_t PWM_TIMER_callback[];
/* MPU6050 callback function for the PINT component */
extern void CB_MPU6050(pint_pin_int_t pintr, uint32_t pmatch_status);
/* ENCA_CLK callback function for the PINT component */
extern void CB_ENCA(pint_pin_int_t pintr, uint32_t pmatch_status);
/* ENCB_CLK callback function for the PINT component */
extern void CB_ENCB(pint_pin_int_t pintr, uint32_t pmatch_status);
/* BUTTON callback function for the PINT component */
extern void CB_BUTTON(pint_pin_int_t pintr, uint32_t pmatch_status);

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitPeripherals_cm33_core0(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
